# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import tokenio.proto.banklink_pb2 as banklink__pb2
from fank import fank_pb2 as fank_dot_fank__pb2


class FankServiceStub(object):
  """//////////////////////////////////////////////////////////////////////////////////////////////////
  Fank testing API, used to create accounts on the fly. Used for testing.

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.AddClient = channel.unary_unary(
        '/io.token.proto.bankapi.FankService/AddClient',
        request_serializer=fank_dot_fank__pb2.AddClientRequest.SerializeToString,
        response_deserializer=fank_dot_fank__pb2.AddClientResponse.FromString,
        )
    self.GetClient = channel.unary_unary(
        '/io.token.proto.bankapi.FankService/GetClient',
        request_serializer=fank_dot_fank__pb2.GetClientRequest.SerializeToString,
        response_deserializer=fank_dot_fank__pb2.GetClientResponse.FromString,
        )
    self.AddAccount = channel.unary_unary(
        '/io.token.proto.bankapi.FankService/AddAccount',
        request_serializer=fank_dot_fank__pb2.AddAccountRequest.SerializeToString,
        response_deserializer=fank_dot_fank__pb2.AddAccountResponse.FromString,
        )
    self.GetAccounts = channel.unary_unary(
        '/io.token.proto.bankapi.FankService/GetAccounts',
        request_serializer=fank_dot_fank__pb2.GetAccountsRequest.SerializeToString,
        response_deserializer=fank_dot_fank__pb2.GetAccountsResponse.FromString,
        )
    self.GetAccount = channel.unary_unary(
        '/io.token.proto.bankapi.FankService/GetAccount',
        request_serializer=fank_dot_fank__pb2.GetAccountRequest.SerializeToString,
        response_deserializer=fank_dot_fank__pb2.GetAccountResponse.FromString,
        )
    self.AuthorizeLinkAccounts = channel.unary_unary(
        '/io.token.proto.bankapi.FankService/AuthorizeLinkAccounts',
        request_serializer=fank_dot_fank__pb2.AuthorizeLinkAccountsRequest.SerializeToString,
        response_deserializer=banklink__pb2.BankAuthorization.FromString,
        )
    self.AuthorizeLinkAccountsGet = channel.unary_unary(
        '/io.token.proto.bankapi.FankService/AuthorizeLinkAccountsGet',
        request_serializer=fank_dot_fank__pb2.AuthorizeLinkAccountsRequest.SerializeToString,
        response_deserializer=banklink__pb2.BankAuthorization.FromString,
        )
    self.GetOauthAccessToken = channel.unary_unary(
        '/io.token.proto.bankapi.FankService/GetOauthAccessToken',
        request_serializer=fank_dot_fank__pb2.GetOauthAccessTokenRequest.SerializeToString,
        response_deserializer=fank_dot_fank__pb2.GetOauthAccessTokenResponse.FromString,
        )
    self.GetNotification = channel.unary_unary(
        '/io.token.proto.bankapi.FankService/GetNotification',
        request_serializer=fank_dot_fank__pb2.GetNotificationRequest.SerializeToString,
        response_deserializer=fank_dot_fank__pb2.GetNotificationResponse.FromString,
        )
    self.GetNotifications = channel.unary_unary(
        '/io.token.proto.bankapi.FankService/GetNotifications',
        request_serializer=fank_dot_fank__pb2.GetNotificationsRequest.SerializeToString,
        response_deserializer=fank_dot_fank__pb2.GetNotificationsResponse.FromString,
        )
    self.VerifyAlias = channel.unary_unary(
        '/io.token.proto.bankapi.FankService/VerifyAlias',
        request_serializer=fank_dot_fank__pb2.VerifyAliasRequest.SerializeToString,
        response_deserializer=fank_dot_fank__pb2.VerifyAliasResponse.FromString,
        )
    self.GetAuthRequestPayload = channel.unary_unary(
        '/io.token.proto.bankapi.FankService/GetAuthRequestPayload',
        request_serializer=fank_dot_fank__pb2.GetAuthRequestPayloadRequest.SerializeToString,
        response_deserializer=fank_dot_fank__pb2.GetAuthRequestPayloadResponse.FromString,
        )
    self.GetAuthRequestSignature = channel.unary_unary(
        '/io.token.proto.bankapi.FankService/GetAuthRequestSignature',
        request_serializer=fank_dot_fank__pb2.GetAuthRequestSignatureRequest.SerializeToString,
        response_deserializer=fank_dot_fank__pb2.GetAuthRequestSignatureResponse.FromString,
        )


class FankServiceServicer(object):
  """//////////////////////////////////////////////////////////////////////////////////////////////////
  Fank testing API, used to create accounts on the fly. Used for testing.

  """

  def AddClient(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetClient(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddAccount(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetAccounts(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetAccount(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AuthorizeLinkAccounts(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AuthorizeLinkAccountsGet(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetOauthAccessToken(self, request, context):
    """
    Used by bank-demo to obtain access token.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetNotification(self, request, context):
    """
    Used by clients to make sure that notifications were routed and correctly delivered to
    the fank. This is mainly for testing the flow where a notification is sent through a bank
    instead of straight to devices.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetNotifications(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VerifyAlias(self, request, context):
    """
    Used by sdk-java-tests to create members in the fank realms.


    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetAuthRequestPayload(self, request, context):
    """
    Used to retrieve the token payload in direct guest checkout flow

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetAuthRequestSignature(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FankServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'AddClient': grpc.unary_unary_rpc_method_handler(
          servicer.AddClient,
          request_deserializer=fank_dot_fank__pb2.AddClientRequest.FromString,
          response_serializer=fank_dot_fank__pb2.AddClientResponse.SerializeToString,
      ),
      'GetClient': grpc.unary_unary_rpc_method_handler(
          servicer.GetClient,
          request_deserializer=fank_dot_fank__pb2.GetClientRequest.FromString,
          response_serializer=fank_dot_fank__pb2.GetClientResponse.SerializeToString,
      ),
      'AddAccount': grpc.unary_unary_rpc_method_handler(
          servicer.AddAccount,
          request_deserializer=fank_dot_fank__pb2.AddAccountRequest.FromString,
          response_serializer=fank_dot_fank__pb2.AddAccountResponse.SerializeToString,
      ),
      'GetAccounts': grpc.unary_unary_rpc_method_handler(
          servicer.GetAccounts,
          request_deserializer=fank_dot_fank__pb2.GetAccountsRequest.FromString,
          response_serializer=fank_dot_fank__pb2.GetAccountsResponse.SerializeToString,
      ),
      'GetAccount': grpc.unary_unary_rpc_method_handler(
          servicer.GetAccount,
          request_deserializer=fank_dot_fank__pb2.GetAccountRequest.FromString,
          response_serializer=fank_dot_fank__pb2.GetAccountResponse.SerializeToString,
      ),
      'AuthorizeLinkAccounts': grpc.unary_unary_rpc_method_handler(
          servicer.AuthorizeLinkAccounts,
          request_deserializer=fank_dot_fank__pb2.AuthorizeLinkAccountsRequest.FromString,
          response_serializer=banklink__pb2.BankAuthorization.SerializeToString,
      ),
      'AuthorizeLinkAccountsGet': grpc.unary_unary_rpc_method_handler(
          servicer.AuthorizeLinkAccountsGet,
          request_deserializer=fank_dot_fank__pb2.AuthorizeLinkAccountsRequest.FromString,
          response_serializer=banklink__pb2.BankAuthorization.SerializeToString,
      ),
      'GetOauthAccessToken': grpc.unary_unary_rpc_method_handler(
          servicer.GetOauthAccessToken,
          request_deserializer=fank_dot_fank__pb2.GetOauthAccessTokenRequest.FromString,
          response_serializer=fank_dot_fank__pb2.GetOauthAccessTokenResponse.SerializeToString,
      ),
      'GetNotification': grpc.unary_unary_rpc_method_handler(
          servicer.GetNotification,
          request_deserializer=fank_dot_fank__pb2.GetNotificationRequest.FromString,
          response_serializer=fank_dot_fank__pb2.GetNotificationResponse.SerializeToString,
      ),
      'GetNotifications': grpc.unary_unary_rpc_method_handler(
          servicer.GetNotifications,
          request_deserializer=fank_dot_fank__pb2.GetNotificationsRequest.FromString,
          response_serializer=fank_dot_fank__pb2.GetNotificationsResponse.SerializeToString,
      ),
      'VerifyAlias': grpc.unary_unary_rpc_method_handler(
          servicer.VerifyAlias,
          request_deserializer=fank_dot_fank__pb2.VerifyAliasRequest.FromString,
          response_serializer=fank_dot_fank__pb2.VerifyAliasResponse.SerializeToString,
      ),
      'GetAuthRequestPayload': grpc.unary_unary_rpc_method_handler(
          servicer.GetAuthRequestPayload,
          request_deserializer=fank_dot_fank__pb2.GetAuthRequestPayloadRequest.FromString,
          response_serializer=fank_dot_fank__pb2.GetAuthRequestPayloadResponse.SerializeToString,
      ),
      'GetAuthRequestSignature': grpc.unary_unary_rpc_method_handler(
          servicer.GetAuthRequestSignature,
          request_deserializer=fank_dot_fank__pb2.GetAuthRequestSignatureRequest.FromString,
          response_serializer=fank_dot_fank__pb2.GetAuthRequestSignatureResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'io.token.proto.bankapi.FankService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
